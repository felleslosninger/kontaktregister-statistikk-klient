#!/usr/bin/env bash

export VERSION=DEV-SNAPSHOT
export REGISTRY=local
configName=kontaktregister-properties
secretKeyName=kontaktregister-maskinporten-private.pem
secretCertName=kontaktregister-maskinporten.cer
stackName=krr

__ok() {
    printf "\u2714 $1\n"
}

assertOrEnableSwarmMode() {
    docker node ls 2>&1 >/dev/null || {
        read -p "Enable swarm mode in Docker? [Y/n] " answer
        [[ -z ${answer} ]] && answer='y'
        [[ ${answer} =~ [yY] ]] && { docker swarm init; } || { return 1; }
    }
    __ok "Swarm mode enabled"
}

assertStatisticsStackIsRunning() {
    docker stack ps statistics 2>&1 >/dev/null || { >&2 echo "Statistics stack is not running."; return 1; }
    __ok "Statistics stack is running"
}

assertMaskinportenClientPrivateKey(){
   [[ -z $(docker secret ls --quiet --filter name=${secretKeyName}) ]] && {
    echo "Maskinporten client private key missing! You have to acquire correct private key which matches public key stored in Maskinporten and manually add this as docker secret: docker secret create ${secretKeyName} <privatekey.pem>"; return 1;
  }
  __ok "Maskinporten client private key exists"
}

assertOrCreateMaskinportenClientCert() {
    [[ -z $(docker secret ls --quiet --filter name=${secretCertName}) ]] && {
        read -p "No maskinporten client certificate exists for Statistics Ingest API. Do you want to create one? [Y/n] " answer
        [[ -z ${answer} ]] && answer='y'
        [[ ${answer} =~ [yY] ]] && { docker secret create ${secretCertName} docker/kontaktregister-statistikk-klient-test1.cer; } || { exit 1; }
    }
    __ok "Maskinporten client certificate exists"
}

assertOrCreateConfig() {
    [[ -z $(docker config ls -qf name=${configName}) ]] && {
        read -p "No configuration found for service. Do you want me to create one? [Y/n] " answer
        [[ -z ${answer} ]] && answer='y'
        [[ ${answer} =~ [yY] ]] && { echo "$(configString)" | docker config create ${configName} -; } || { exit 1; }
    }
    __ok "Configuration exists"
}

configString() {
    echo \
"url.base.kontaktregister=https://admin.difi.eon.no
url.base.ingest.statistikk=http://ingest:8080
maskinporten.iss=16442c2c-6e5b-40b9-980b-56b185ff3a53
maskinporten.aud=https://test1.maskinporten.no/
maskinporten.token-endpoint=https://test1.maskinporten.no/token
maskinporten.kid=70eeee66-f066-478f-a0fe-88220b8e00e3
statistics.years.back=0
"

#"url.base.admin=https://admin.difi.eon.no
#url.base.ingest.statistikk=http://ingest:8080
#maskinporten.iss=077c546f-9428-49db-ad9a-9ab067729836
#maskinporten.aud=https://ver2.maskinporten.no/
#maskinporten.token-endpoint=https://ver2.maskinporten.no/token
#maskinporten.kid=2252976e-bb5b-4bf5-aca3-370b3251b20b
#statistics.years.back=3
#"
}

createIngestPassword() {
    local user="991825827"
    local password
    password=$(curl \
        -sS -f --connect-timeout 3 --max-time 10 \
        -H "Content-Type: application/json;charset=UTF-8" \
        -XPOST \
        http://localhost:8083/credentials/${user}/short) || return $?
    echo -n "${password}"
}

buildImages() {
    mvn package -Dno.difi.jenkins-pipeline.docker-registry=$REGISTRY -DskipTests || return 1
}

deployStack() {
    docker stack deploy -c docker/stack.yml --resolve-image=never ${stackName} || return 1
    echo "Stack successfully deployed. You can remove it with 'docker stack rm ${stackName}'"
}

clean() {
    echo "Cleaning up previous deploy"
    docker stack rm  ${stackName}
    [[ -z $(docker config ls -qf name=${configName}) ]] || docker config rm ${configName}
    [[ -z $(docker secret ls --quiet --filter name=${secretName}) ]] || docker secret rm ${secretName}
    echo "Cleaned"
}

[[ $1 == "clean" ]] && { clean; exit; }
[[ $1 == "-c" ]] && clean
assertOrEnableSwarmMode || exit 1
assertStatisticsStackIsRunning || return 1
assertMaskinportenClientPrivateKey || exit 1
assertOrCreateMaskinportenClientCert || exit 1
assertOrCreateConfig || exit 1
buildImages || exit 1
deployStack || exit 1
